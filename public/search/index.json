[{"content":"bevy - 0 배비 설정및 화면 띄우기\n베비 설치 1 2 3 cargo new zero2bevy cd zero2bevy cargo add bevy 설치가 완료됐으면 다음과 같은 코드를 작성하여 실행해보자. 설치가 정상적으로 됐으면 오류가 없이 실행될꺼다.\n1 2 3 4 use bevy::prelude::*; fn main() { App::new().run(); } 실행 이벤트 감지 베비는 add_systems(Startup, 함수)를 사용하여 실행 이벤트를 감시할수 있다\n1 2 3 4 5 6 7 8 9 use bevy::prelude::*; fn main() { App::new() .add_systems(Startup, startup) // 아레 지정할 startup함수를 베비가 실행됬을때 실행한다 .run(); } fn startup() { println!(\u0026#34;Hello, Bevy!\u0026#34;); } 화면 띄우기 화면을 띄우기 위해서는 plugin을 설정해줘야한다 bevy에서 plugin을 설정하고 싶다면 add_plugin메서드를 사용하면 된다\n1 2 3 4 5 6 7 8 9 10 use bevy::prelude::*; fn main() { App::new() .add_plugins(bevy::DefaultPlugins) // 기본 베비 플러그인 설정 .add_systems(Startup, startup) .run(); } fn startup() { println!(\u0026#34;Hello, Bevy!\u0026#34;); } ","date":"2024-03-14T00:00:00Z","image":"http://localhost:1313/p/bevy-0/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/bevy-0/","title":"Zero부터 시작하는 bevy - 0"},{"content":"rust에서 연산자 오버로드를 사용하려면 std::ops에 있는 trait을 상속 시키면 된다\n아레 코드는 Vec2끼리 더하기를 가능하게 하는 코드다\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 use std::ops::Add; struct Vec2 { x: f32, y: f32, } // Add 상속 impl Add for Vec2 { // 더했을때 반환할 타입 type Output = Vec2; /* let a = Vec2{x: 1.0, y: 3.0} let b = Vec2{x: 1.0, y: 3.0} 일 경우 a + b를 했을때 Vec2{ x: a.x + b.x, y: a.y + b.y, } 를 반환해주는 함수 */ fn add(self, rhs: Vec2) -\u0026gt; Vec2 { Vec2 { x: self.x + rhs.x, y: self.y + rhs.y, } } } 덧셈 말고도 뺄셈(Sub) 나눔셈(Div) 곱셈(Mul)같은게 있고 +=를 구현하고싶다면 AddAssign을 쓰면 된다\n","date":"2024-03-14T00:00:00Z","image":"http://localhost:1313/p/rust-syntax-ops/thumb_hu4efc58c8e04c07399d2a263a5f4afac5_140728_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/rust-syntax-ops/","title":"연산자 오버로드"}]