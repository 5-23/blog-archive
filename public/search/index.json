[{"content":"컴포넌트 만들기 화면에 있는 모든 객채를 검사하면 안되니 컴포넌트라는것을 만들어 하나씩 검사해보자. 나는 MyCustomComponent라는 이름으로 만들었는데 이름은 바꿔도 상관없다\n1 2 3 4 #[derive(Component)] struct MyCustomComponent { // 이름은 바꿔도 상관없음 name: String, } 컴포넌트 생성 아까 우리가 만들었던 컴포넌트를 생성해보자\n1 2 3 4 5 6 7 8 9 10 11 12 fn setup(mut commands: Commands) { commands.spawn(Camera2dBundle::default()); // aaa라는 이름으로 MyCustomComponent생성 commands.spawn(MyCustomComponent { name: \u0026#34;aaa\u0026#34;.to_string(), }); // bbb라는 이름으로 MyCustomComponent생성 commands.spawn(MyCustomComponent { name: \u0026#34;bbb\u0026#34;.to_string(), }); } 이벤트 만들기 컴포넌트까지 생성했으니 이제 이벤트를 만들어보자\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fn main() { App::new() // ...생략 .add_systems(Update, component_info) // Update시스템: 계속 반복되면서 실행되게 해줌 .run(); } fn component_info( // 지금 생성되있는 모든 MyCustomComponent 컴포넌트의 정보를 가져옴 q: Query\u0026lt;\u0026amp;MyCustomComponent\u0026gt;, ) { // 소환한 모든 컴포넌트를 반복문을 사용하여 출력 for component in q.iter() { // 아까 생성한 컴포넌트의 이름을 출력 println!(\u0026#34;name: {}\u0026#34;, component.name); } } ","date":"2024-04-10T00:00:00Z","image":"http://localhost:1313/p/zero2bevy-3/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/zero2bevy-3/","title":"Zero부터 시작하는 bevy - 3"},{"content":"설정 배경을 없에기 위해 main함수에 이 옵션을 추가해줘야한다\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 App::new() .insert_resource(ClearColor(Color::rgba(0.0, 0.0, 0.0, 0.0))) // 투명배경 .add_plugins(DefaultPlugins.set(WindowPlugin { primary_window: Some(Window { title: \u0026#34;Bevy game\u0026#34;.to_string(), // 제목 canvas: Some(\u0026#34;#bevy\u0026#34;.to_owned()), prevent_default_event_handling: false, transparent: true, decorations: false, #[cfg(target_os = \u0026#34;macos\u0026#34;)] composite_alpha_mode: CompositeAlphaMode::PostMultiplied, // 맥에서 배경 없엠 window_level: bevy::window::WindowLevel::AlwaysOnTop, ..default() }), ..default() })) 없는곳 클릭설정 1 2 3 4 5 6 7 8 9 10 11 fn update_cursor_hit_test( click: Res\u0026lt;ButtonInput\u0026lt;MouseButton\u0026gt;\u0026gt;, cursor_world_pos: Res\u0026lt;CursorWorldPos\u0026gt;, mut q_primary_window: Query\u0026lt;\u0026amp;mut Window, With\u0026lt;PrimaryWindow\u0026gt;\u0026gt;, mut q_pet: Query\u0026lt;(\u0026amp;mut Pet, \u0026amp;Transform), With\u0026lt;Pet\u0026gt;\u0026gt;, ) { let mut primary_window = q_primary_window.single_mut(); // If the window has decorations (e.g. a border) then it should be clickable primary_window.cursor.hit_test = true; // 이 값이 바뀔떄 배경 클릭 여부가 결정된다. } 응용코드 ","date":"2024-03-24T00:00:00Z","image":"http://localhost:1313/p/zero2bevy-2.5/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/zero2bevy-2.5/","title":"Zero부터 시작하는 bevy - 특별편?"},{"content":"gleam맛보기 gleam은 erlang환경에서 돌아가는 언어다(elixir처럼)\ngleam install window 1 scoop install gleam mac 1 brew install gleam linux 1 nix profile install gleam 초기화 name이라는 폴더에 gleam프로젝트가 만들어진다\n1 gleam new \u0026lt;name\u0026gt; 이제 실행을 해봐야한다. 이 명령어를 쓰면 hello for 이 출력될꺼다.\n1 2 cd \u0026lt;아까 쓴 name\u0026gt; gleam run ","date":"2024-03-16T00:00:00Z","image":"http://localhost:1313/p/gleam-1/thumb_hu4efc58c8e04c07399d2a263a5f4afac5_112229_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/gleam-1/","title":"gleam언어 맛보기"},{"content":"번들 번들은 commands.spawn을 통해 소환할수 있고, 종류가 좀 많다. 그러니 우리는 몇개만 알아보자\nNodeBundle NodeBundle은 간단하게 화면에 사각형을 띄우기에 좋다.\nNodeBundle은 다음과 같은 값이 들어간다 (많이 쓰이는것만 주석을 달아놨다)\n1 2 3 4 5 6 7 8 9 10 11 12 13 pub struct NodeBundle { pub node: Node, pub style: Style, // 위치, 크기같은 스타일을 설정할수 있다 pub background_color: BackgroundColor, // 배경색을 설정할수 있다 pub border_color: BorderColor, // 아웃라인 색상을 설정할수 있다 pub focus_policy: FocusPolicy, pub transform: Transform, // 기본 정보에서 값을 추가하여 조정한다 pub global_transform: GlobalTransform, pub visibility: Visibility, // 보이는지 안보이는지를 설정할수 있다 pub inherited_visibility: InheritedVisibility, pub view_visibility: ViewVisibility, pub z_index: ZIndex, // 번들이 겹첬을때 보이는 우선순위를 설정한다 } 예시 사용법은 다음과 같다\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands, ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default(), ); commands.spawn(NodeBundle { style: Style { // 크기를 100px로 설정한다 width: Val::Px(100.0), height: Val::Px(100.0), // 위치를 위로부터100px, 왼쪽으로부터100px로 설정한다 top: Val::Px(100.0), left: Val::Px(100.0), ..Default::default() }, //배경색을 흰색으로 설정한다 background_color: BackgroundColor(Color::hex(\u0026#34;#ffffff\u0026#34;).unwrap()), ..Default::default() }); } ImageBundle 만약 NodeBunddle에 사진을 넣고싶다면 이걸 쓰면 된다. 여기에서는 NodeBunddle과 다르게 사진을 추가할수있는 image속성과 사진의 크기를 조정할수있는 image_size가 추가로 있다\n세팅 일단 이미지를 불러와야해서 assets폴더를 만들어주고 아무 사진이나 assets폴더에 넣는다 경로는 이렇다\n1 2 3 4 5 6 7 assets/ - test.png // 나는 귀여운 ferris사진을 test.png라는 이름으로 넣었다 src/ - main.rs Cargo.lock Cargo.toml 예시 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands, // assets폴더를 로드하기 위해서 AssetServer를 추가해준다 assets_server: Res\u0026lt;AssetServer\u0026gt;, ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default(), ); commands.spawn(ImageBundle { style: Style { // 크기를 100px로 설정한다 width: Val::Px(100.0), height: Val::Px(100.0), // 위치를 위로부터100px, 왼쪽으로부터100px로 설정한다 top: Val::Px(100.0), left: Val::Px(100.0), ..Default::default() }, // assets폴더에서 test.png를 로드한다 image: assets_server.load(\u0026#34;test.png\u0026#34;).into(), //배경색을 흰색으로 설정한다 ..Default::default() }); } SpriteBunddle SpriteBunddle은 기본적으로 중항에 정렬된다는 특징이 있다 ui를 만드는게 아니라면 이걸 쓰면 된다.\n1 2 3 4 5 6 7 8 9 pub struct SpriteBundle { pub sprite: Sprite, // 스프라이트의 크기, 위치, 색상등을 조정할수 있다. pub transform: Transform, pub global_transform: GlobalTransform, pub texture: Handle\u0026lt;Image\u0026gt;, pub visibility: Visibility, pub inherited_visibility: InheritedVisibility, pub view_visibility: ViewVisibility, } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands, // assets폴더를 로드하기 위해서 AssetServer를 추가해준다 assets_server: Res\u0026lt;AssetServer\u0026gt;, ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default(), ); commands.spawn(SpriteBundle { // assets폴더에서 test.png를 로드한다 (여기선 .into는 굳이 안써도 됨) texture: assets_server.load(\u0026#34;test.png\u0026#34;), //배경색을 흰색으로 설정한다 ..Default::default() }); } 심화 예시\n","date":"2024-03-16T00:00:00Z","image":"http://localhost:1313/p/zero2bevy-2/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/zero2bevy-2/","title":"Zero부터 시작하는 bevy - 2"},{"content":"카메라 설정하기 화면을 보이게 하기 위해서는 카메라를 스폰해줘야한다.\n1 2 3 4 5 6 7 8 9 10 11 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default() ); } 실행하면 배경이 검정 -\u0026gt; 회색으로 바껴있을꺼다 배경 변경 배경을 변경하는 방법은 2개가 있다\nmain함수에서 변경 함수에 있는 commands를 사용하여 변경 main함수에서 변경 1 2 3 4 5 6 7 fn main() { App::new() .add_plugins(bevy::DefaultPlugins) .insert_resource(ClearColor(Color::hex(\u0026#34;#8aadf4\u0026#34;).unwrap())) // cLearColor라는것을 insert_resource를 사용하여 추가하면 배경색이 바뀐다 .add_systems(Startup, startup) .run(); } setup함수에서 변경 setup을 불러오는데 시간이 좀 걸리기때문에 이 방법은 처음 배경을 초기화 할때는 추천하지 않는다\n1 2 3 4 5 6 7 8 9 10 11 12 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands, ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default(), ); // 배경색상 설정 commands.insert_resource(ClearColor(Color::hex(\u0026#34;#8aadf4\u0026#34;).unwrap())) } ","date":"2024-03-15T00:00:00Z","image":"http://localhost:1313/p/zero2bevy-1/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/zero2bevy-1/","title":"Zero부터 시작하는 bevy - 1"},{"content":"베비 설치 1 2 3 cargo new zero2bevy cd zero2bevy cargo add bevy 설치가 완료됐으면 다음과 같은 코드를 작성하여 실행해보자. 설치가 정상적으로 됐으면 오류가 없이 실행될꺼다.\n1 2 3 4 use bevy::prelude::*; fn main() { App::new().run(); } 실행 이벤트 감지 베비는 add_systems(Startup, 함수)를 사용하여 실행 이벤트를 감시할수 있다\n1 2 3 4 5 6 7 8 9 use bevy::prelude::*; fn main() { App::new() .add_systems(Startup, startup) // 아레 지정할 startup함수를 베비가 실행됬을때 실행한다 .run(); } fn startup() { println!(\u0026#34;Hello, Bevy!\u0026#34;); } 화면 띄우기 화면을 띄우기 위해서는 plugin을 설정해줘야한다 bevy에서 plugin을 설정하고 싶다면 add_plugin메서드를 사용하면 된다\n1 2 3 4 5 6 7 8 9 10 use bevy::prelude::*; fn main() { App::new() .add_plugins(bevy::DefaultPlugins) // 기본 베비 플러그인 설정 .add_systems(Startup, startup) .run(); } fn startup() { println!(\u0026#34;Hello, Bevy!\u0026#34;); } ","date":"2024-03-14T00:00:00Z","image":"http://localhost:1313/p/zero2bevy-0/thumb_hufad68abf6107ffc2ef859ebe1b42b6e2_84202_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/zero2bevy-0/","title":"Zero부터 시작하는 bevy - 0"},{"content":"rust에서 연산자 오버로드를 사용하려면 std::ops에 있는 trait을 상속 시키면 된다\n아레 코드는 Vec2끼리 더하기를 가능하게 하는 코드다\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 use std::ops::Add; struct Vec2 { x: f32, y: f32, } // Add 상속 impl Add for Vec2 { // 더했을때 반환할 타입 type Output = Vec2; /* let a = Vec2{x: 1.0, y: 3.0} let b = Vec2{x: 1.0, y: 3.0} 일 경우 a + b를 했을때 Vec2{ x: a.x + b.x, y: a.y + b.y, } 를 반환해주는 함수 */ fn add(self, rhs: Vec2) -\u0026gt; Vec2 { Vec2 { x: self.x + rhs.x, y: self.y + rhs.y, } } } 덧셈 말고도 뺄셈(Sub) 나눔셈(Div) 곱셈(Mul)같은게 있고 +=를 구현하고싶다면 AddAssign을 쓰면 된다\n","date":"2024-03-14T00:00:00Z","image":"http://localhost:1313/p/rust-syntax-ops/thumb_hu4efc58c8e04c07399d2a263a5f4afac5_140728_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/rust-syntax-ops/","title":"연산자 오버로드"}]