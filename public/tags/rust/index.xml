<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Hugo Theme Stack Starter</title>
    <link>http://localhost:1313/tags/rust/</link>
    <description>Recent content in Rust on Hugo Theme Stack Starter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zero부터 시작하는 bevy - 1</title>
      <link>http://localhost:1313/p/zero2bevy-1/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/p/zero2bevy-1/</guid>
      <description>카메라 설정하기 화면을 보이게 하기 위해서는 카메라를 스폰해줘야한다.&#xA;1 2 3 4 5 6 7 8 9 10 11 fn startup( // 엔티티를 스폰하기 위해서 commands를 추가해준다 mut commands: Commands ) { // commands.sapwn는 엔티티/번들 을 스폰하는 메서드이다 commands.spawn( // 2d카메라를 기본 형식으로 스폰한다 Camera2dBundle::default() ); } 실행하면 배경이 검정 -&amp;gt; 회색으로 바껴있을꺼다 배경 변경 배경을 변경하는 방법은 2개가 있다&#xA;main함수에서 변경 함수에 있는 commands를 사용하여 변경 main함수에서 변경 1 2 3 4 5 6 7 fn main() { App::new() .</description>
    </item>
    <item>
      <title>Zero부터 시작하는 bevy - 0</title>
      <link>http://localhost:1313/p/zero2bevy-0/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/p/zero2bevy-0/</guid>
      <description>베비 설치 1 2 3 cargo new zero2bevy cd zero2bevy cargo add bevy 설치가 완료됐으면 다음과 같은 코드를 작성하여 실행해보자. 설치가 정상적으로 됐으면 오류가 없이 실행될꺼다.&#xA;1 2 3 4 use bevy::prelude::*; fn main() { App::new().run(); } 실행 이벤트 감지 베비는 add_systems(Startup, 함수)를 사용하여 실행 이벤트를 감시할수 있다&#xA;1 2 3 4 5 6 7 8 9 use bevy::prelude::*; fn main() { App::new() .add_systems(Startup, startup) // 아레 지정할 startup함수를 베비가 실행됬을때 실행한다 .</description>
    </item>
    <item>
      <title>연산자 오버로드</title>
      <link>http://localhost:1313/p/rust-syntax-ops/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/p/rust-syntax-ops/</guid>
      <description>rust에서 연산자 오버로드를 사용하려면 std::ops에 있는 trait을 상속 시키면 된다&#xA;아레 코드는 Vec2끼리 더하기를 가능하게 하는 코드다&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 use std::ops::Add; struct Vec2 { x: f32, y: f32, } // Add 상속 impl Add for Vec2 { // 더했을때 반환할 타입 type Output = Vec2; /* let a = Vec2{x: 1.</description>
    </item>
  </channel>
</rss>
